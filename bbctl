#!/usr/bin/env python

# Copyright (c) 2016 Jeppe Ledet-Pedersen <jlp@satlab.org>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import print_function

import sys
import time
import os.path
import argparse
import copy
import codecs

import bluebox
import fec

subcommands = {}


def subcommand(*args, **kwargs):
    def _decorator(func):
        nargs = list(args)
        help = nargs[0]
        nargs[0] = func.__name__
        kwargs["help"] = help
        _option = (nargs, kwargs)
        if func.__name__ not in subcommands:
            subcommands[func.__name__] = {}
        subcommands[func.__name__]["sub"] = _option
        subcommands[func.__name__]["func"] = func
        if "args" not in subcommands[func.__name__]:
            subcommands[func.__name__]["args"] = []
        return func
    return _decorator


def argument(*args, **kwargs):
    def _decorator(func):
        _option = (args, kwargs)
        if func.__name__ not in subcommands:
            subcommands[func.__name__] = {}
        if "args" not in subcommands[func.__name__]:
            subcommands[func.__name__]["args"] = []
        subcommands[func.__name__]["args"].insert(0, _option)
        return func
    return _decorator


colors = {"gray": 30, "red": 31, "green": 32, "yellow": 33,
          "blue": 34, "magenta": 35, "cyan": 36, "white": 37}

enable_colors = False


def colorize(color, text, *args, **kwargs):
    print("\033[{0}m{1}\033[0m".format(colors[color] if enable_colors else 0, text), *args, **kwargs)


def parse_frequency(s):
    prefixes = {'K': 1e3, 'M': 1e6, 'G': 1e9}
    mult = 1
    if s.lower().endswith("hz"):
        s = s[:-2]
    for prefix in prefixes.keys():
        if s.upper().endswith(prefix):
            mult = prefixes[prefix]
            s = s[:-1]
            break
    try:
        hz = int(float(s) * mult)
    except:
        raise argparse.ArgumentTypeError("{0} is not a valid frequency".format(s))

    return hz


def parse_int(s):
    try:
        integer = int(s, 0)
    except:
        raise argparse.ArgumentTypeError("{0} is not a valid integer".format(s))

    return integer


def parse_power(s):
    try:
        power = int(s)
        if power < 0 or power > 63:
            raise ValueError
    except:
        raise argparse.ArgumentTypeError("power must be between 0 and 63")

    return power


def parse_state(s):
    s = s.lower()

    if s in ("on", "enable", "1"):
        state = True
    elif s in ("off", "disable", "0"):
        state = False
    else:
        raise argparse.ArgumentTypeError("invalid state")

    return state


def parse_serial(s):
    try:
        serial = int(s, 16)
    except:
        raise argparse.ArgumentTypeError("{0} is not a valid serial number".format(s))

    return serial


def bar(value, minimum=-130, maximum=-47, width=40):
    value = max(value, minimum)
    value = min(value, maximum)

    progress = int((value + abs(minimum)) * width / (maximum + abs(minimum)))
    bar = "[" + progress * "|" + (width - progress) * " " + "]"

    return bar


@subcommand("set device in DFU mode")
def dfu(args, bb):
    bb.dfu()


@subcommand("flash device firmware")
@argument('filename', help="firmware file to flash")
def flash(args, bb):
    bb.flash(args.filename)


@subcommand("reset BlueBox")
def reset(args, bb):
    bb.reset()


@subcommand("show RF silicon revision")
def version(args, bb):
    ver = bb.version()
    print(hex(ver))


@subcommand("show current RSSI reading in dBm")
def rssi(args, bb):
    rssi = bb.rssi()
    print("{0} dBm".format(rssi))


@subcommand("continuously show RSSI reading")
@argument("-t", metavar="samples", dest="samples", type=int, help="number of samples per frequency", default=10)
@argument("-w", "--waterfall", action="store_true", help="enable waterfall signal output")
def signal(args, bb):
    minimum = -130
    maximum = -47
    width = 40

    while True:
        try:
            prefix = "" if args.waterfall else "\r"
            postfix = "\n" if args.waterfall else ""
            rssi = bb.rssi(args.samples)
            sys.stdout.write("{}{} {} dBm {}".format(prefix, bar(rssi), rssi, postfix))
            sys.stdout.flush()
            time.sleep(0.1)
        except KeyboardInterrupt:
            print()
            sys.exit(0)
        except Exception as e:
            print(e)
            break


@subcommand("receive packets and print to screen")
@argument('-d', '--decode', dest="decode", help="decode packets", action='store_true', default=False)
@argument('-k', '--key', dest="key", help="HMAC-SHA1 key", default=None)
@argument('-r', '--retransmit', dest="retransmit", help="Enable retransmission of received data", action='store_true')
def receive(args, bb):
    count = 0

    if args.decode:
        ph = fec.PacketHandler(args.key)

    while True:
        bit_corr = 0
        byte_corr = 0
        data, rssi, freq = bb.receive(100)
        if data is None:
            continue

        if args.decode:
            try:
                data, bit_corr, byte_corr = ph.deframe(data)
            except:
                byte_corr = -1

        color = "red" if byte_corr == -1 else "yellow" if bit_corr or byte_corr else "green"
        colorize(color, "{0:03} {1:.2f} RX ({2:03d}/{3:03d}) {4:4} dBm {5:+5d} Hz ({6:03}) '{7}'".format(count, time.time(), bit_corr, byte_corr, rssi, freq, len(data), codecs.encode(data, "hex")))
        count += 1

        if byte_corr == 0 and args.retransmit:
            bytes = data
            colorize("blue", "{0:03} {1:.2f} TX ({2}) '{3}'".format(count, time.time(), len(bytes), codecs.encode(bytes, "hex")))
            if args.decode:
                bytes = ph.frame(bytes)
            bb.transmit(bytes)


@subcommand("transmit packet data")
@argument('packet', help="packet hex string to transmit", nargs="+")
@argument('-r', '--wait-reply', dest="wait_reply", help="wait for reply", action='store_true', default=False)
@argument('-e', '--encode', dest="encode", help="encode packets", action='store_true', default=False)
@argument('-d', '--decode', dest="decode", help="decode packets", action='store_true', default=False)
@argument('-k', '--key', dest="key", help="HMAC-SHA1 key", default=None)
@argument('-c', '--continuous', dest="continuous", help="Continuously send data", action="store_true")
@argument('-s', '--switch', dest="switch", metavar="MS", help="Switching time in ms", type=int, default=0)
@argument('-n', '--number', dest="number", help="Repeat transmission NUMBER times", type=int, default=1)
def transmit(args, bb):
    continuous = True
    tx_count = 0
    rx_count = 0

    if args.encode or args.decode:
        ph = fec.PacketHandler(args.key)

    while continuous:
        for i in range(0, args.number):
            for packet in args.packet:
                bytes = codecs.decode(packet, "hex")
                colorize("blue", "{0:03} {1:.2f} TX ({2}) '{3}'".format(tx_count, time.time(), len(bytes), codecs.encode(bytes, "hex")))
                if args.encode:
                    bytes = ph.frame(bytes)

                if args.verbose:
                    print("Transmit data:")
                    print(ph.hexdump(bytes))

                bb.transmit(bytes)
                tx_count += 1
                if args.wait_reply:
                    data, rssi, freq = bb.receive()
                    if data is None:
                        colorize("yellow", "Timeout while waiting for reply")
                    else:
                        bit_corr = 0
                        byte_corr = 0

                        if args.verbose:
                            print("Receive data:")
                            print(ph.hexdump(data))

                        if args.decode:
                            try:
                                data, bit_corr, byte_corr = ph.deframe(data)
                            except:
                                byte_corr = -1

                        color = "red" if byte_corr == -1 else "yellow" if bit_corr or byte_corr else "green"

                        colorize(color, "{0:03} {1:.2f} RX ({2:03d}/{3:03d}) {4:4} dBm {5:+5d} Hz ({6:03}) '{7}'".format(rx_count, time.time(), bit_corr, byte_corr, rssi, freq, len(data), codecs.encode(data, "hex")))
                        rx_count += 1

                continuous = args.continuous
                time.sleep(args.switch / 1000.0)

testmode_desc = """
This command puts the BlueBox in testmode and transmits a test signal.

The available test signals are:
  carrier    continuously transmit carrier frequency
  0101       transmit sequency of alternating 0's and 1's
  high       transmit 1 frequency
  low        transmit 0 frequency
  pn9        transmit PN9 pattern
  syncword   continuously transmit programmed syncword
  off        disable test pattern
"""


@subcommand("put device in test mode", description=testmode_desc)
@argument('mode', help="test signal", choices=("carrier", "high", "low", "pn9", "1010", "syncword", "off"))
@argument('-l', '--limit', type=int, metavar="seconds", help="stop after limit seconds")
def testmode(args, bb):
    if args.mode == "carrier":
        bb.testmode(bb.TESTMODE_OFF)
        bb.tx_mode()
    elif args.mode == "high":
        bb.testmode(bb.TESTMODE_PATTERN_HIGH)
        bb.tx_mode()
    elif args.mode == "low":
        bb.testmode(bb.TESTMODE_PATTERN_LOW)
        bb.tx_mode()
    elif args.mode == "pn9":
        bb.testmode(bb.TESTMODE_PATTERN_PN9)
        bb.tx_mode()
    elif args.mode == "1010":
        bb.testmode(bb.TESTMODE_PATTERN_1010)
        bb.tx_mode()
    elif args.mode == "syncword":
        bb.testmode(bb.TESTMODE_PATTERN_SWD)
        bb.tx_mode()
    elif args.mode == "off":
        bb.testmode(bb.TESTMODE_OFF)
        bb.rx_mode()

    if args.mode != "off" and args.limit is not None:
        time.sleep(args.limit)
        bb.testmode(bb.TESTMODE_OFF)
        bb.rx_mode()


@subcommand("set device in transmit mode")
def txmode(args, bb):
    bb.tx_mode()


@subcommand("set device in receive mode")
def rxmode(args, bb):
    bb.rx_mode()


@subcommand("get or set device frequency")
@argument('frequency', help="requested frequency", type=parse_frequency, nargs="?", default=None)
@argument('-t', '--transmit', action="store_true", help="only set transmit frequency")
@argument('-r', '--receive', action="store_true", help="only set transmit frequency")
def frequency(args, bb):
    if args.frequency is not None:
        if not args.transmit and not args.receive:
            bb.set_frequency(args.frequency)
        else:
            if args.transmit:
                bb.set_tx_frequency(args.frequency)
            if args.receive:
                bb.set_rx_frequency(args.frequency)
    else:
        if not args.transmit and not args.receive:
            print(bb.get_frequency())
        else:
            if args.receive:
                print(bb.get_rx_frequency())
            elif args.transmit:
                print(bb.get_tx_frequency())


@subcommand("get or set device bitrate")
@argument('bitrate', type=int, help="requested bitrate", nargs="?", default=None)
@argument("-m", "--automod", action="store_true", help="Automatically adjust modulation index")
def bitrate(args, bb):
    if args.bitrate is not None:
        if args.automod:
            oldbit = bb.get_bitrate()
            oldmod = bb.get_modindex()
            mod = max(oldmod * oldbit / args.bitrate, 1)
            bb.set_modindex(mod)
        bb.set_bitrate(args.bitrate)
    else:
        print(bb.get_bitrate())


@subcommand("get or set device modulation index")
@argument('modindex', type=int, help="requested modulation index", nargs="?", default=None)
def modindex(args, bb):
    if args.modindex is not None:
        bb.set_modindex(args.modindex)
    else:
        print(bb.get_modindex())

@subcommand("get or set device IF bandwidth")
@argument('ifbw', type=int, help="requested IF bandwidth", nargs="?", default=None)
def ifbw(args, bb):
    if args.ifbw is not None:
        bb.set_ifbw(args.ifbw)
    else:
        print(bb.get_ifbw())

@subcommand("get or set device training sequence")
@argument('length', type=int, help="training sequence length in ms", nargs="?", default=None)
def training(args, bb):
    if args.length is not None:
        bb.set_training(args.length)
    else:
        print(bb.get_training())


@subcommand("get or set device power level")
@argument('power', type=parse_power, help="power level 0-63 (ADF702x PA setting, not in dBm!)", nargs="?", default=None)
def power(args, bb):
    if args.power is not None:
        bb.set_power(args.power)
    else:
        print(bb.get_power())


@subcommand("get or set device CSMA level in dBm")
@argument('level', type=int, help="CSMA level in dBm", nargs="?", default=None)
def csma(args, bb):
    if args.level is not None:
        bb.set_csma(args.level)
    else:
        print(bb.get_csma())

@subcommand("get or set device sync word")
@argument('syncword', help="sync word. Only ", nargs="?", default=None)
def syncword(args, bb):
    if args.syncword is not None:
        bb.set_syncword(int(args.syncword, 16))
    else:
        print("{:06x}".format(bb.get_syncword()))

@subcommand("enable or disable AFC")
@argument("state", help="on/off", type=parse_state, nargs="?", default=None)
@argument("-r", help="AFC range", type=int, default=0)
@argument("-p", help="AFC Kp", type=int, default=0)
@argument("-i", help="AFC Ki", type=int, default=0)
def afc(args, bb):
    if args.state is not None:
        bb.set_afc(args.state, args.r, args.p, args.i)
    else:
        state, r, p, i = bb.get_afc()
        print("afc: {}, range: {}, Kp: {}, Ki: {}".format("on" if state else "off", r, p, i))


@subcommand("basic spectrum analysis")
@argument("-c", metavar="center", dest="center", type=parse_frequency, help="center frequency in Hz", default=str(437.45e6))
@argument("-s", metavar="span", dest="span", type=parse_frequency, help="frequency span in Hz", default=str(5e3))
@argument("-b", metavar="bins", dest="bins", type=int, help="number of bins to divide span in", default=10)
@argument("-t", metavar="samples", dest="samples", type=int, help="number of samples per frequency", default=10)
def spectrum(args, bb):
    import curses

    center = args.center
    span = args.span
    bins = args.bins

    if center - span < 0:
        raise Exception("Invalid span")

    stdscr = curses.initscr()
    curses.noecho()
    curses.cbreak()
    stdscr.nodelay(1)
    curses.curs_set(0)

    while True:
        try:
            stdscr.erase()
            stdscr.addstr("showing spectrum from {0} Hz to {1} Hz in {2} bins\n\n".format(
                          center - span // 2, center + span // 2, bins))
            orig_freq = bb.get_frequency()
            for freq in range(center - span // 2, center + span // 2 + 1, span // bins):
                bb.set_frequency(freq)
                rssi = bb.rssi(args.samples)
                stdscr.addstr("{}: {} {} dBm\n".format(freq, bar(rssi), rssi))
            bb.set_frequency(orig_freq)
            stdscr.refresh()
        except KeyboardInterrupt:
            break
        except Exception as e:
            print(e)
            break
        finally:
            if stdscr.getch() >= 0:
                break

    curses.curs_set(1)
    curses.nocbreak()
    stdscr.keypad(0)
    curses.echo()
    curses.endwin()


@subcommand("set ADF7021 register")
@argument("register", type=parse_int, help="register number to write")
@argument("value", type=parse_int, help="new register value")
def register(args, bb):
    bb.reg_write(args.register, (args.value << 8))


@subcommand("set or get device serial number")
@argument("serial", help="new serial number", type=parse_serial, nargs="?", default=None)
def serial(args, bb):
    if args.serial is not None:
        bb.set_serialnumber(args.serial)
    else:
        serial = bb.get_serialnumber()
        print("{0:08x}".format(serial))


@subcommand("show detailed help for subcommand")
@argument('command', help="detailed help command", nargs="?", default=None)
def help(args, parser):
    if args.command is not None:
        subcommands[args.command]["parser"].print_help()
    else:
        parser.print_help()


@subcommand("list all connected devices with status")
def list(args):
    index = 0

    fields = "{}: {} {} (USB path {:<03}:{:<03})\n" + \
             "   Serial:    {:08x}\n" + \
             "   Firmware:  {}\n" + \
             "   Frequency: {} Hz\n" + \
             "   Modindex:  {}\n" + \
             "   IF BW:     {}\n" + \
             "   Bitrate:   {} bps\n" + \
             "   Syncword:  {:x}\n" + \
             "   Power:     {}\n" + \
             "   Training:  {} ms\n" + \
             "   Transmit:  {}\n" + \
             "   Received:  {}"

    while True:
        try:
            bb = bluebox.Bluebox(index=index)
            print(fields.format(
                index,
                bb.manufacturer,
                bb.product,
                bb.dev.bus,
                bb.dev.address,
                bb.get_serialnumber(),
                bb.get_fwrevision(),
                bb.get_frequency(),
                bb.get_modindex(),
                bb.get_ifbw(),
                bb.get_bitrate(),
                bb.get_syncword(),
                bb.get_power(),
                bb.get_training(),
                bb.get_transmitted(),
                bb.get_received()))
        except Exception as e:
            if index == 0:
                print("Error: no BlueBox found: {}".format(e))
            break
        finally:
            index += 1


class SubcommandHelpFormatter(argparse.RawDescriptionHelpFormatter):
    def _format_action(self, action):
        parts = super(argparse.RawDescriptionHelpFormatter, self)._format_action(action)
        if action.nargs == argparse.PARSER:
            parts = parts.split("\n")
            parts = ["   " + "  ".join(part.lstrip().split(" ", 1)) for part in parts[1:]]
            parts = "\n".join(parts)
        return parts

desc = """
Main BlueBox satellite ground station control program. %(prog)s is used for
controlling frequency, bitrate, etc. of the device and to transmit and
receive data.

The BlueBox firmware and bbctl is free software licensed under the MIT license.
For more information see http://www.satlab.org or http://github.com/satlab

"""

epilog = "See '%(prog)s help <command>' for more information on a specific command."


def main():
    global enable_colors
    parser = argparse.ArgumentParser(description=desc, epilog=epilog, formatter_class=SubcommandHelpFormatter)
    parser.add_argument("-i", metavar="<index>", dest="index", default=None, type=int, help="select specific BlueBox device at index")
    parser.add_argument("-s", metavar="<serial>", dest="serialnum", default=None, help="select specific BlueBox device with serial")
    parser.add_argument("-t", metavar="<timeout>", dest="timeout", type=int, default=10000, help="set transfer timeout in ms")
    parser.add_argument("-v", "--verbose", action="store_true", help="enable verbose output")
    parser.add_argument("-c", "--no-color", action="store_false", dest="color", help="disable color output")
    subparsers = parser.add_subparsers(dest="subparser", title="The available subcommands are", metavar="<command>")

    for sub in sorted(subcommands):
        args, kwargs = subcommands[sub]["sub"]
        subparser = subparsers.add_parser(*args, formatter_class=SubcommandHelpFormatter, **kwargs)
        subcommands[sub]["parser"] = subparser
        for args, kwargs in subcommands[sub]["args"]:
            arg = args[0] if kwargs.get("nargs", "") == "?" else "<" + args[0] + ">"
            if not args[0].startswith("-"):
                kwargs["metavar"] = kwargs.get("metavar", arg)
            subparser.add_argument(*args, **kwargs)
        subparser.set_defaults(func=subcommands[sub]["func"])

    if len(sys.argv) < 2:
        parser.print_help()
        sys.exit(1)

    if not sys.argv[1].startswith("-") and not sys.argv[1] in subcommands:
        print("{0}: '{1}' is not a {0} command. See '{0} --help'.".format(parser.prog, sys.argv[1]))
        sys.exit(1)

    args = parser.parse_args()
    if args.func == help:
        args.func(args, parser)
        sys.exit(0)

    if args.func == list:
        args.func(args)
        sys.exit(0)

    enable_colors = args.color

    try:
        bb = bluebox.Bluebox(index=args.index, serial=args.serialnum, timeout=args.timeout)
    except KeyboardInterrupt:
        print()
        sys.exit(0)
    except Exception as e:
        print("Failed to connect to BlueBox: {0}".format(e))
        sys.exit(0)

    if args.verbose:
        print("Found {0} {1} with serial {2} on bus {3}:{4}".format(
              bb.manufacturer, bb.product, bb.serial, bb.bus, bb.address))

    try:
        args.func(args, bb)
    except Exception as e:
        print("Error: {0}".format(str(e)))
    except KeyboardInterrupt:
        print()
    sys.exit(0)


if __name__ == "__main__":
    main()
