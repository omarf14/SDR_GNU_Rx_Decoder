#!/usr/bin/env python

# Copyright (c) 2016 Jeppe Ledet-Pedersen <jlp@satlab.org>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import print_function, division

import sys
sys.path.append('..')

import argparse
import configparser
import json

import bottle

from tracker import Tracker
from receiver import Receiver

from bluebox import Bluebox

# AJAX calls
@bottle.route('/bb/info')
def bb_info():
    return receiver.info()

@bottle.route('/tracker')
def passinfo():
    return tracker.pass_info()

@bottle.route('/packets/<start>')
def packets(start):
    return {'packets': receiver.packets(int(start))}

# Default page
@bottle.route('/')
def index():
    return bottle.static_file('index.html', root='pages')

# Javascript
@bottle.route('/js/<filename>')
def js(filename):
    return bottle.static_file(filename, root='js')

# CSS
@bottle.route('/style/<filename>')
def js(filename):
    return bottle.static_file(filename, root='style')

# CSS
@bottle.route('/fonts/<filename>')
def js(filename):
    return bottle.static_file(filename, root='fonts')

def main():
    # Parse optional arguments
    parser = argparse.ArgumentParser()
    parser.add_argument("-c", metavar="<conf>", dest="conf",
                        default="default.conf", help="config file")
    args = parser.parse_args()

    # Parse config file
    conf = configparser.ConfigParser()
    conf.read(args.conf)

    # Connect to BlueBox
    try:
        bb = Bluebox(index=conf['bluebox'].getint('index'),
                     serial=conf['bluebox'].get('serial'))
    except Exception as e:
        print("Failed to connect to BlueBox: {0}".format(e))
        sys.exit(0)

    # Start receiver thread
    global receiver
    receiver = Receiver(bb, 'packets.json',
                        conf['spacecraft'].getint('bitrate'),
                        conf['spacecraft'].getint('modindex'),
                        int(conf['spacecraft'].get('syncword'), 16))

    # Start tracking thread
    global tracker
    tracker = Tracker(bb,
                      conf['groundstation'].getfloat('lat'),
                      conf['groundstation'].getfloat('lon'),
                      conf['spacecraft'].getint('frequency'),
                      conf['spacecraft'].get('tle'))

    # Start server
    host = conf['server'].get('host')
    port = conf['server'].get('port')
    print('Listening on http://{}:{}'.format(host, port))
    bottle.run(host=host, port=port, quiet=True)

if __name__ == '__main__':
    main()
